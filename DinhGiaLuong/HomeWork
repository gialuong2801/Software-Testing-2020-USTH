EX1-1
- Level 2 testing, the purpose is to show failures 
  Looking for failures is a negative activity
- Level 3 testing shows the presence, not absence or failure. If we use software, we expose some risk. 
- Level 4 testing means that the purpose of testing is to improve the ability of the developers to produce high quality software.
  A mental discipline that increases quality:
  + Test engineers can become technical leaders of the project
- So from those describe above we can think of some factors that would help a development organization move from Beizer’s testing level 2 (testing is to show errors) to testing level 4 (a mental discipline that increases quality)  like : 
	+ experience
	+ responsibility
	+ expertise
	+ technical
	+ skills 
	+ Good teamwork and communication to lead 
  EX1-3
  What do we mean by “level 3 thinking is that the purpose of testing is
to reduce risk?”

- Is to know more faults therefor to reduce risk in the future.

What risk?

- High cost of repairing
- High pressure on personnel

Can we reduce the risk to zero?
- I think we cannot. Because in work we have so many Stages and each stage have another people do. Sometime maybe they are conflicted
EX1-4
## Vector
```Java
import java.util.Vector;
class Vector_demo {
  public static Vector union(Vector v1, Vector v2)
  {
    Vector v3 = new Vector();
    v3.addAll(v1);
    v3.addAll(v2);
    return v3;
  }
  public static void main(String[] arg)
  {
    Vector v1 = new Vector();
    v1.add(1);
    Vector v2 = new Vector();
    v2.add(1);
    Vector v3 = union(v1, v2);
  }
}
```
### a)

Done!

### b)

One of possible fault is lack of verification statements such as checking `v1` is empty or not.

### c)

Test case[1]
```Java
Vector v1 = new Vector();
Vector v2 = new Vector();
```
EX1-5
## findLast()
```Java
// findLast()
public static int findLast (int[] x, int y)
   {
      // As the example in the book points out, this loop should end at 0.
      for (int i=x.length-1; i > 0; i--)
      {
         if (x[i] == y)
         {
            return i;
         }
      }
      return -1;
   }
```
## lastZero
```Java
// lastZero()
public static int lastZero (int[] x)
   {
      for (int i = 0; i < x.length; i++)
      {
         if (x[i] == 0)
         {
            return i;
         }
      }
      return -1;
   }
```
## countPositive
```Java
// countPositive()
public static int countPositive (int[] x)
   {
      int count = 0;
      for (int i=0; i < x.length; i++)
      {
         if (x[i] >= 0)
         {
            count++;
         }
      }
      return count;
   }
```
## oddOrPos
```Java
// oddOrPos()
public static int oddOrPos (int[] x)
   {  // Effects:  if x is null throw NullPointerException
      // else return the number of elements in x that
      //      are either odd or positive (or both)
      int count = 0;
      for (int i = 0; i < x.length; i++)
      {
         if (x[i]%2 == 1 || x[i] > 0)
         {
            count++;
         }
      }
      return count;
   }
```
### a)

- The fault in findLast() is in condition of for loop. One of possible modification is:
```Java
for (int i=x.length-1; i >= 0; i--)
```

- The fault in lastZero() is lack of statements. One of possible modification is:
```Java
public static int lastZero (int[] x)
   {
      int index = 0;
      for (int i = 0; i < x.length; i++)
      {
         if (x[i] == 0) index = i;
      }
      return -1;
   }
```

- The fault in countPositive() is the redundancy in if statement in for loop. One of possible modification is:
```Java
if (x[i] > 0)
```

- The fault in oddOrPos() is in the if statement in for loop. One of possible modification is:
```Java
if (x[i] > 0)
{
  count++;
}
else
{
  if (x[i]%2 ==1 ) count++;
}
```

### b)

- Test case for findLast() `int[] x = {1,2,3}` and `y = 2`

- Test case for lastZero() `int[] x = {0, 1, 1}`

- Test case for countPositive() `int[] x = {-2, 4, -6}`

- Test case for oddOrPos() `int[] x = {1, 2, 3}`

### c)

- Test case for findLast() `int[] x = {1, 1, 1}` and `y = 1`

- Test case for lastZero() `int[] x = {0}`

- Test case for countPositive() Not Possible

- Test case for oddOrPos() `int[] x = {1, 2, 3}`

### d)

Well the programmer design test cases wrongly.

### e)

I don't know

### f)

I haven't installed junit yet.

EX2-2
2. Answer question (a) or (b), but not both, depending on your background.

(a) If you do, or have, worked for a software development company, how much effort did your
testing / QA team put into each of the four test activities? (test design, automation,
execution, evaluation)

(b) If you have never worked for a software development company, which of the four test
activities do you think you are best qualified for? (test design, automation, execution,
evaluation)

Answer:
(b) I think i fit with Test Design:
 - Test design is a document outlining the cases required in test cases
   + Demonstrate the test point of view, the cases required to cover Spec.
   + Short, easy to understand.
   + Easy to create a test: input -> output.
EX3-10
```Java
import org.junit.*;
import org.junit.runner.RunWith;
import static org.junit.Assert.*;
import static org.junit.Assume.*;
import org.junit.experimental.theories.DataPoint;
import org.junit.experimental.theories.DataPoints;
import org.junit.experimental.theories.Theories;
import org.junit.experimental.theories.Theory;
import java.util.*;
@RunWith (Theories.class)
public class ListTheoryTest
{
   @DataPoints
   public static String[] string = {"huong", "long", "huy", "minh"};
   @DataPoints
   public static List[] lists = {
      Arrays.asList ("huong", "long", "huy"),
      Arrays.asList ("huy", "minh", "dinh anh"),
      Arrays.asList ("dinh anh")
   };
   @Theory
   public void removeThenAddDoesNotChangeList
                   (List<String> list, String string)  // Parameters!
   {
      assumeTrue (list != null);            // Assume
      assumeTrue (list.contains (string));  // Assume
      List<String> copy = new ArrayList<String>(list);   // Act
      copy.remove (string);                       
      copy.add (string);
      assertTrue (list.equals (copy));      // Assert
    }
}
```
EX3-2
# Ex 3-2
Inheritance is a strong software design mechanism. How-
ever its complicated the testing ability. To be able to con-
trol a class with inheritance trait, we need to control every
sub-class and super-class of it. Same thing with observ-
ability, the apply of inheritance only makes its harder to
observe the behaviour of the class since the class not only
depend on them-self, they also depend on their super-class
or sub-class.
EX3-3
# Exercise 3 - Chapter 3

> Develop JUnit tests for the BoundedQueue class

```java
import org.junit.Test;
import static org.junit.Assert.*;

public class BoundedQueueTest{
	
	// Test 1: push 2 values to queue

	@Test
	public void boundedq(){
		BoundedQueue bq = new BoundedQueue(2);
		bq.enqueue(30);
		bq.enqueue(12);
		assertEquals("[30, 12]", bq.toString());
	}

	// Test 2: pop 1 item out of queue

	@Test
	public void popp(){
		BoundedQueue bq = new BoundedQueue(2);
		bq.enqueue(30);
		bq.enqueue(12);
		Object i = bq.dequeue();
		assertEquals("[12]", bq.toString());
	}

	// Test 3: Add more than queue capacity

	@Test(expected=IllegalStateException.class)
	public void capp(){
		BoundedQueue bq = new BoundedQueue(2);
		bq.enqueue(30);
		bq.enqueue(12);
		bq.enqueue(20);
		assertTrue("Exceed queue capacity", [30, 12, 20] == bq.toString());
	}

	// Test 4: check isFull() false

	@Test
	public void fullfalse(){
		BoundedQueue bq = new BoundedQueue(3);
		bq.enqueue(30);
		bq.enqueue(12);
		bq.enqueue(20);
		Object i = bq.dequeue();
		assertEquals(false, bq.isFull());
	}

	// Test 5: check isFull() true

	@Test
	public void fulltrue(){
		BoundedQueue bq = new BoundedQueue(3);
		bq.enqueue(30);
		bq.enqueue(12);
		bq.enqueue(20);
		assertEquals(true, bq.isFull());
	}

	// Test 6: check isEmpty() true

	@Test
	public void emptytrue(){
		BoundedQueue bq = new BoundedQueue(3);
		bq.enqueue(30);
		Object i = bq.dequeue();
		assertEquals(true, bq.isEmpty());
	}

	// Test 7: check isEmpty() false

	@Test
	public void emptyfalse(){
		BoundedQueue bq = new BoundedQueue(3);
		bq.enqueue(30);
		assertEquals(false, bq.isEmpty());
	}

	// Test 8: push null to queue

	@Test (expected=NullPointerException.class)
	public void nully()
	{
		
		BoundedQueue q = new BoundedQueue(2);
		q.enqueue(null);
		assertEquals("[30]",q.toString());
	}

	
}
```
